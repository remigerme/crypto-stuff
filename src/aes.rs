// Implemented according to FIPS 197 : https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf

use std::vec::Vec;

// Type hints
type Word = [u8; 4];
type State = [Word; 4];
type IO = Vec<u8>;
type MasterKey = Vec<Word>;
type ExpandedKey = Vec<Word>;

// nr as a function of nk
fn n_rounds(nk: usize) -> usize {
    match nk {
        4 => 10,
        6 => 12,
        8 => 14,
        _ => panic!("Unknown nk (nb of words in master key)")
    }
}

const S_BOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];

const INV_S_BOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];

const R_CON: [Word; 11] = [
    [0x00, 0, 0, 0], // never used
    [0x01, 0, 0, 0],
    [0x02, 0, 0, 0],
    [0x04, 0, 0, 0],
    [0x08, 0, 0, 0],
    [0x10, 0, 0, 0],
    [0x20, 0, 0, 0],
    [0x40, 0, 0, 0],
    [0x80, 0, 0, 0],
    [0x1B, 0, 0, 0],
    [0x36, 0, 0, 0]
];


// IO <-> state
fn io_to_state(inp: &IO) -> State {
    let mut s = [[0; 4]; 4];
    for i in 0..4 {
        for j in 0..4 {
            s[i][j] = inp[i + 4 * j];
        }
    }
    s
}

fn state_to_io(s: &State) -> IO {
    let mut out: IO = Vec::new();
    for j in 0..4 {
        for i in 0..4 {
            out.push(s[i][j]);
        }
    }
    out
}

fn xor_word(a: &Word, b: &Word) -> Word {
    let mut c = [0; 4];
    for i in 0..4 {
        c[i] = a[i] ^ b[i];
    }
    c
}


// See section 4.2.1
fn xtime(b: u8) -> u8 {
    let m: u16 = 0b100011011;
    if b & 0b10000000 == 0b10000000 {
        return (((b as u16) << 1) ^ m).try_into().unwrap()
    } else {
        b << 1
    }
}


// See section 5.1
fn cipher_state(s: &mut State, w: &ExpandedKey, nr: usize) {
    add_round_key(s, &w[0..4]);

    for round in 1..nr {
        sub_bytes(s);
        shift_rows(s);
        mix_columns(s);
        add_round_key(s, &w[4 * round .. 4 * (round + 1)]);
    }

    sub_bytes(s);
    shift_rows(s);
    add_round_key(s, &w[4 * nr .. 4 * (nr + 1)]);
}

pub fn cipher(plain: &IO, k: &MasterKey) -> IO {
    // PKCS#7 padding
    let n_padding: u8 = (16 - plain.len() % 16).try_into().unwrap();
    let mut plain: IO = plain.clone();
    plain.extend(vec![n_padding; n_padding as usize]);

    let nk = k.len(); 
    let nr = n_rounds(nk);
    let w: ExpandedKey = key_expansion(nk, &k);

    let mut states: Vec<State> = (0..(plain.len() / 16))
        .map(|i| io_to_state(&plain[16 * i .. 16 * (i + 1)].to_vec()))
        .collect();

    for s in states.iter_mut() {
        cipher_state(s, &w, nr);
    }

    states.iter()
          .flat_map(
            |s| state_to_io(s)
                .iter()
                .map(|&b| b)
                .collect::<Vec<u8>>())
          .collect()
}

// See section 5.1.1
fn sub_word(a: &Word) -> Word {
    [
        S_BOX[a[0] as usize],
        S_BOX[a[1] as usize],
        S_BOX[a[2] as usize],
        S_BOX[a[3] as usize]
    ]
}

fn sub_bytes(s: &mut State) {
    for i in 0..4 {
        for j in 0..4 {
            s[i][j] = S_BOX[s[i][j] as usize];
        }
    }
}


// See section 5.1.2
fn shift_rows(s: &mut State) {
    // First row is not affected
    // Second row
    let a = s[1][0];
    s[1][0] = s[1][1];
    s[1][1] = s[1][2];
    s[1][2] = s[1][3];
    s[1][3] = a;
    // Third row
    let (a, b) = (s[2][0], s[2][1]);
    s[2][0] = s[2][2];
    s[2][1] = s[2][3];
    s[2][2] = a;
    s[2][3] = b;
    // Fourth row
    let a = s[3][0];
    s[3][0] = s[3][3];
    s[3][3] = s[3][2];
    s[3][2] = s[3][1];
    s[3][1] = a;
}


// See section 5.1.3
fn mix_columns(s: &mut State) {
    for j in 0..4 {
        let a = s[0][j] ^ s[1][j] ^ s[2][j] ^ s[3][j];
        let b = s[0][j];
        for i in 0..4 {
            s[i][j] = match i {
                3 => a ^ s[i][j] ^ xtime(s[i][j] ^ b),
                _ => a ^ s[i][j] ^ xtime(s[i][j] ^ s[i + 1][j])
            };
        }
    }
}


// See section 5.1.4
fn add_round_key(s: &mut State, w: &[Word]) {
    for i in 0..4 {
        for j in 0..4 {
            s[i][j] ^= w[j][i]
        }
    }
}


// See section 5.2
fn rot_word(a: &Word) -> Word {
    [a[1], a[2], a[3], a[0]]
}

fn key_expansion(nk: usize, k: &MasterKey) -> ExpandedKey {
    assert!(k.len() == nk);
    
    let nr = n_rounds(nk);

    let mut w = k.clone();

    for i in nk..(4 * (nr + 1)) {
        let mut temp = w[i - 1];
        if i % nk == 0 {
            temp = xor_word(&sub_word(&rot_word(&temp)), &R_CON[i / nk]);
        } else if nk > 6 && i % nk == 4 {
            temp = sub_word(&temp);
        }
        w.push(xor_word(&w[i - nk], &temp));
    }
    w
}


// See section 5.3
fn inv_cipher_state(s: &mut State, w: &ExpandedKey, nr: usize) {
    add_round_key(s, &w[4 * nr .. 4 * (nr + 1)]);

    for round in (1..nr).rev() {
        inv_shift_rows(s);
        inv_sub_bytes(s);
        add_round_key(s, &w[4 * round .. 4 * (round + 1)]);
        inv_mix_columns(s);
    }
    
    inv_sub_bytes(s);
    inv_shift_rows(s);
    add_round_key(s, &w[0..4]);
}

pub fn inv_cipher(ciphertext: &IO, k: &MasterKey) -> IO {
    assert_eq!(0, ciphertext.len() % 16);

    let nk = k.len(); 
    let nr = n_rounds(nk);
    let w = key_expansion(nk, k);

    let mut states: Vec<State> = (0..(ciphertext.len() / 16))
        .map(|i| io_to_state(&ciphertext[16 * i .. 16 * (i + 1)].to_vec()))
        .collect();
    
    for s in states.iter_mut() {
        inv_cipher_state(s, &w, nr);
    }

    let plain: IO = {
        states.iter()
              .flat_map(
                |s| state_to_io(s)
                  .iter()
                  .map(|&b| b)
                  .collect::<Vec<u8>>())
              .collect()
    };
    // PKCS#7 unpadding
    let n = *plain.last().unwrap();
    plain[0..plain.len() - n as usize].to_vec()
}


// See section 5.3.1
fn inv_shift_rows(s: &mut State) {
    // First row is not affected
    // Second row
    let a = s[1][3];
    s[1][3] = s[1][2];
    s[1][2] = s[1][1];
    s[1][1] = s[1][0];
    s[1][0] = a;
    // Third row
    let (a, b) = (s[2][0], s[2][1]);
    s[2][0] = s[2][2];
    s[2][2] = a;
    s[2][1] = s[2][3];
    s[2][3] = b;
    // Fourth row
    let a = s[3][3];
    s[3][3] = s[3][0];
    s[3][0] = s[3][1];
    s[3][1] = s[3][2];
    s[3][2] = a;
}


// See section 5.3.2
fn inv_sub_bytes(s: &mut State) {
    for i in 0..4 {
        for j in 0..4 {
            s[i][j] = INV_S_BOX[s[i][j] as usize];
        }
    }
}


// See section 5.3.3
fn inv_mix_columns(s: &mut State) {
    //0x09 = 1 + 8
    let time_9 = |b| b ^ xtime(xtime(xtime(b)));
    // 0x0b = 1 + 2 + 8
    let time_b = |b| b ^ xtime(b) ^ xtime(xtime(xtime(b)));
    // 0x0d = 1 + 4 + 8
    let time_d = |b| b ^ xtime(xtime(b)) ^ xtime(xtime(xtime(b)));
    //0x0e = 2 + 4 + 8
    let time_e = |b| xtime(b) ^ xtime(xtime(b)) ^ xtime(xtime(xtime(b)));
    for j in 0..4 {
        let t = [s[0][j], s[1][j], s[2][j], s[3][j]];
        s[0][j] = time_e(t[0]) ^ time_b(t[1]) ^ time_d(t[2]) ^ time_9(t[3]);
        s[1][j] = time_9(t[0]) ^ time_e(t[1]) ^ time_b(t[2]) ^ time_d(t[3]);
        s[2][j] = time_d(t[0]) ^ time_9(t[1]) ^ time_e(t[2]) ^ time_b(t[3]);
        s[3][j] = time_b(t[0]) ^ time_d(t[1]) ^ time_9(t[2]) ^ time_e(t[3]);
    }
}
